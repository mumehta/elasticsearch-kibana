{  
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"AWS CloudFormation for elastic search and kibana",
   "Metadata":{  

   },
   "Parameters":{  
      "KeyName":{  
         "Description":"Name of an existing EC2 KeyPair to enable SSH access to the instances",
         "Type":"AWS::EC2::KeyPair::KeyName",
         "ConstraintDescription":"must be the name of an existing EC2 KeyPair."
      },
      "ESSnapshot": {
         "Default": "1234",
         "Type": "String"
      },
      "FormattedName": {
         "Default": "elasticsearch",
         "Type": "String"
      },
      "BucketName": {
         "Default": "mycobucketnameunique",
         "Type": "String"
      },
      "InstanceCount":{  
         "Description":"Number of instances to start",
         "Default":"3",
         "MinValue":"2",
         "MaxValue":"12",
         "Type":"Number"
      },
      "SSHLocation":{  
         "Description":"The IP address range that can be used to SSH to the EC2 instances",
         "Type":"String",
         "MinLength":"9",
         "MaxLength":"18",
         "Default":"0.0.0.0/0",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription":"must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "Environment":{  
         "AllowedValues":[  
            "local",
            "dev",
            "staging",
            "prod"
         ],
         "ConstraintDescription":"must be a valid environment",
         "Default":"dev",
         "Description":"Environment",
         "Type":"String"
      },
      "ClusterSize":{
        "Description" : "Number of ElasticSearch instances to launch",
        "Type" : "Number",
        "Default" : "3"
      },
      "AMI": {
         "Default": "ami-96666ff5",
         "Type": "String"
      },
      "AppName": {
         "Default": "elastic-search-testing",
         "Type": "String"
      },
      "Environment": {
         "AllowedValues": ["dev",
         "uat",
         "e2e",
         "prod"],
         "Default": "dev",
         "Type": "String"
      }
   },
   "Mappings":{  
      "EnvMappings": {
         "dev": {
            "ALBPublicSubnetA": "subnet-9fa4f3fb",
            "ALBPublicSubnetB": "subnet-76eb9000",
            "ALBPublicSubnetC": "subnet-aa37bef3",
            "ESMasterDesiredCapacity": 0,
            "ESMasterEBSSize": "100", 
            "ESMasterInstanceType": "t2.large",  
            "ESMasterMaxSize": 0,
            "ESMasterMinSize": 0,
            "ESNodeDesiredCapacity": 3, 
            "ESNodeEBSSize": "100", 
            "ESNodeInstanceType": "t2.large",  
            "ESNodeMaxSize": 3,  
            "ESNodeMinSize": 3, 
            "KibanaESHeap": "2g",
            "MasterESHeap": "4g",
            "NodeESHeap": "4g",  
            "PublicSubnets": "subnet-9fa4f3fb,subnet-76eb9000,subnet-aa37bef3",  
            "VpcId": "vpc-02b63d66", 
            "ebsoptimized": "False", 
            "loggingbucket": "elb-logs"
         }
      }
   },
   "Conditions":{  

   },
   "Resources":{  
      "AutoScalingGroupMaster": {
         "Properties": {
            "Cooldown": "2100",
            "DesiredCapacity": "0",
            "HealthCheckGracePeriod": "2100",
            "LaunchConfigurationName": {
               "Ref": "LaunchConfigMaster"
            },
            "MaxSize": "0",
            "MinSize": "0",
            "Tags": [{
               "Key": "Name",
               "PropagateAtLaunch": "true",
               "Value": "elasticsearch autoscaling group for master"
            }],
            "TargetGroupARNs": [{
               "Ref": "TargetGroupMaster"
            }],
            "VPCZoneIdentifier": [{
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "PublicSubnets"]
            }]
         },
         "Type": "AWS::AutoScaling::AutoScalingGroup"
      },
      "TargetGroupMaster": {
         "Properties": {
            "HealthCheckIntervalSeconds": "30",
            "HealthCheckPort": "9100",
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": "10",
            "HealthyThresholdCount": "4",
            "Matcher": {
               "HttpCode": "200"
            },
            "Name": "elasticsearch-TargetGroupMaster",
            "Port": "9100",
            "Protocol": "HTTP",
            "UnhealthyThresholdCount": "3",
            "VpcId": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "VpcId"]
            }
         },
         "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
      },
      "AutoScalingGroupNode": {
         "Properties": {
            "Cooldown": "2100",
            "DesiredCapacity": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ESNodeDesiredCapacity"]
            },
            "HealthCheckGracePeriod": "2100",
            "LaunchConfigurationName": {
               "Ref": "LaunchConfig"
            },
            "MaxSize": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ESNodeMaxSize"]
            },
            "MinSize": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ESNodeMinSize"]
            },
            "Tags": [{
               "Key": "Name",
               "PropagateAtLaunch": "true",
               "Value": "Elasticsearch - autoscaling group node"
            }],
            "TargetGroupARNs": [{
               "Ref": "TargetGroupNode"
            }],
            "VPCZoneIdentifier": [{
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "PublicSubnets"]
            }]
         },
         "Type": "AWS::AutoScaling::AutoScalingGroup"
      },
      "CPUAlarmHigh": {
         "Properties": {
            "AlarmActions": [{
               "Ref": "ScaleUpPolicy"
            }],
            "AlarmDescription": "Increase cluster size if CPU high",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [{
               "Name": "AutoScalingGroupName",
               "Value": {
                  "Ref": "AutoScalingGroupNode"
               }
            }],
            "EvaluationPeriods": "1",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Period": "60",
            "Statistic": "Average",
            "Threshold": "90"
         },
         "Type": "AWS::CloudWatch::Alarm"
      },
      "CPUAlarmLow": {
         "Properties": {
            "AlarmActions": [{
               "Ref": "ScaleDownPolicy"
            }],
            "AlarmDescription": "Decrease cluster size if CPU low",
            "ComparisonOperator": "LessThanThreshold",
            "Dimensions": [{
               "Name": "AutoScalingGroupName",
               "Value": {
                  "Ref": "AutoScalingGroupNode"
               }
            }],
            "EvaluationPeriods": "1",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Period": "60",
            "Statistic": "Average",
            "Threshold": "40"
         },
         "Type": "AWS::CloudWatch::Alarm"
      },
      "Cloudwatch": {
         "Properties": {
            "PolicyDocument": {
               "Statement": [{
                  "Action": ["logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"],
                  "Effect": "Allow",
                  "Resource": ["arn:aws:logs:*:*:*"]
               }]
            },
            "PolicyName": "Cloudwatch",
            "Roles": [{
               "Ref": "RoleInstance"
            }]
         },
         "Type": "AWS::IAM::Policy"
      },
      "ScaleDownPolicy": {
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
               "Ref": "AutoScalingGroupNode"
            },
            "Cooldown": "1200",
            "ScalingAdjustment": "-1"
         },
         "Type": "AWS::AutoScaling::ScalingPolicy"
      },
      "ScaleUpPolicy": {
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
               "Ref": "AutoScalingGroupNode"
            },
            "Cooldown": "1200",
            "ScalingAdjustment": "1"
         },
         "Type": "AWS::AutoScaling::ScalingPolicy"
      },
      "LaunchConfig": {
         "Properties": {
            "BlockDeviceMappings": [{
               "DeviceName": "/dev/sda1",
               "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": {
                     "Fn::FindInMap": ["EnvMappings",
                     {
                        "Ref": "Environment"
                     },
                     "ESNodeEBSSize"]
                  },
                  "VolumeType": "gp2"
               }
            }],
            "EbsOptimized": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ebsoptimized"]
            },
            "IamInstanceProfile": {
               "Ref": "InstanceProfile"
            },
            "ImageId": {
               "Ref": "AMI"
            },
            "InstanceType": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ESNodeInstanceType"]
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "SecurityGroups": [{
               "Ref": "sgEC2"
            }],
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": ["",
                  ["#!/bin/bash -ex\n",
                  "export INTERNAL_DOMAIN=$(cat /etc/resolv.conf | grep search | awk '{print $2}' | awk -F '.' '{print $2}')\nexport ES_HEAP=\"",
                  {
                     "Fn::FindInMap": ["EnvMappings",
                     {
                        "Ref": "Environment"
                     },
                     "NodeESHeap"]
                  },
                  "\"\n",
                  "export cluster_name=\"",
                  {
                     "Ref": "FormattedName"
                  },
                  "\"\n",
                  "export ES_SNAPSHOT=\"",
                  {
                     "Ref": "ESSnapshot"
                  },
                  "\"\n",
                  "export STACK_ENV=\"",
                  {
                     "Ref": "Environment"
                  },
                  "\"\n",
                  "export AWS_DEFAULT_REGION=\"",
                  {
                     "Ref": "AWS::Region"
                  },
                  "\"\n",
                  "export CFN_STACK=\"",
                  {
                     "Ref": "AWS::StackName"
                  },
                  "\"\n",
                  "apt-get update && apt-get install -y unzip\n",
                  "curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                  "unzip awscli-bundle.zip\n",
                  "python3 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
                  "aws configure set default.region $AWS_DEFAULT_REGION\n",
                  "#!/bin/bash -ex\n",
                  "sudo wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - \n",
                  "sudo apt-get install apt-transport-https \n",
                  "sudo echo \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\" | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list \n",
                  "sudo apt-get update && sudo apt-get install -y elasticsearch elasticsearch-curator openjdk-8-jre language-pack-en\n",
                  "sudo update-rc.d elasticsearch defaults 95 10 \n",
                  "declare -a esplugins=(discovery-ec2 analysis-phonetic repository-s3) \n",
                  "for esplugin in \"${esplugins[@]}\" \n",
                  "do\n",
                  "/usr/share/elasticsearch/bin/elasticsearch-plugin install $esplugin\n",
                  "done\n",
                  "ASG_NAME=$(aws autoscaling describe-auto-scaling-instances --instance-ids $(curl http://169.254.169.254/latest/meta-data/instance-id -s) --query AutoScalingInstances[].AutoScalingGroupName --output text)\n",
                  "NODES_ASG_NAME=$(aws cloudformation describe-stack-resources --stack-name $CFN_STACK --logical-resource-id AutoScalingGroupNode --query 'StackResources[].PhysicalResourceId' --output text)\n",
                  "MASTER_ASG_NAME=$(aws cloudformation describe-stack-resources --stack-name $CFN_STACK --logical-resource-id AutoScalingGroupMaster --query 'StackResources[].PhysicalResourceId' --output text)\n",
                  "NODES_CLUSTER_LIST=$(for ID in $(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $NODES_ASG_NAME $MASTER_ASG_NAME --query AutoScalingGroups[].Instances[].InstanceId --output text); do aws ec2 describe-instances --instance-ids $ID --query Reservations[].Instances[].PrivateIpAddress --output text; done)\n",
                  "INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id -s)\n",
                  "INSTANCE_LIST=$(echo \"$NODES_CLUSTER_LIST\" | awk -vORS=, '{ print \"\\\"\" $1 \"\\\"\" }' | sed 's/,$/\n/')\n",
                  "export env=$(aws ec2 describe-tags --filters \"Name=key,Values=env\" \"Name=resource-id,Values=$INSTANCE_ID\" --query 'Tags[0].Value' --output text)\n",
                  "sysctl vm.swappiness=1\n",
                  "cat << EOF >> /etc/elasticsearch/elasticsearch.yml\n",
                  "network.host: 0.0.0.0\n",
                  "node.data: true\n",
                  "discovery:\n",
                  "  zen.hosts_provider: ec2\n",
                  "node.name: $INSTANCE_ID\n",
                  "cluster.name: $CFN_STACK\n",
                  "discovery.zen.ping.unicast.hosts: [ $INSTANCE_LIST ]\n",
                  "EOF\n",
                  "echo 'node.master: true' >> /etc/elasticsearch/elasticsearch.yml\n",
                  "echo ES_JAVA_OPTS=\"\\\"-Xms$ES_HEAP -Xmx$ES_HEAP\\\"\" >> /etc/default/elasticsearch\n",
                  "/bin/systemctl daemon-reload\n",
                  "/etc/init.d/elasticsearch start\n"
                  ]]
               }
            }
         },
         "Type": "AWS::AutoScaling::LaunchConfiguration"
      },
      "LaunchConfigMaster": {
         "Properties": {
            "BlockDeviceMappings": [{
               "DeviceName": "/dev/sda1",
               "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": {
                     "Fn::FindInMap": ["EnvMappings",
                     {
                        "Ref": "Environment"
                     },
                     "ESMasterEBSSize"]
                  },
                  "VolumeType": "gp2"
               }
            }],
            "EbsOptimized": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ebsoptimized"]
            },
            "IamInstanceProfile": {
               "Ref": "InstanceProfile"
            },
            "ImageId": {
               "Ref": "AMI"
            },
            "InstanceType": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ESMasterInstanceType"]
            },
            "KeyName": {
               "Ref": "KeyName"
            },
            "SecurityGroups": [{
               "Ref": "sgEC2"
            }],
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": ["",
                  ["#!/bin/bash -ex\n",
                  "export INTERNAL_DOMAIN=$(cat /etc/resolv.conf | grep search | awk '{print $2}' | awk -F '.' '{print $2}')\nexport ES_HEAP=\"",
                  {
                     "Fn::FindInMap": ["EnvMappings",
                     {
                        "Ref": "Environment"
                     },
                     "MasterESHeap"]
                  },
                  "\"\n",
                  "export cluster_name=\"",
                  {
                     "Ref": "FormattedName"
                  },
                  "\"\n",
                  "export ES_SNAPSHOT=\"",
                  {
                     "Ref": "ESSnapshot"
                  },
                  "\"\n",
                  "export STACK_ENV=\"",
                  {
                     "Ref": "Environment"
                  },
                  "\"\n",
                  "export AWS_DEFAULT_REGION=\"",
                  {
                     "Ref": "AWS::Region"
                  },
                  "\"\n",
                  "export CFN_STACK=\"",
                  {
                     "Ref": "AWS::StackName"
                  },
                  "\"\n",
                  "export AVAILABILITY_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone -s)\napt-get update && apt-get install -y unzip\n",
                  "curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                  "unzip awscli-bundle.zip\n",
                  "python3 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
                  "aws configure set default.region $AWS_DEFAULT_REGION\n",
                  "aws ec2 create-volume --size 100 --availability-zone $AVAILABILITY_ZONE --volume-type gp2\n",
                  " | base64 -d | bash\n"]]
               }
            }
         },
         "Type": "AWS::AutoScaling::LaunchConfiguration"
      },
      "InstanceProfile": {
         "Properties": {
            "Roles": [{
               "Ref": "RoleInstance"
            }]
         },
         "Type": "AWS::IAM::InstanceProfile"
      },
      "RoleInstance": {
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [{
                  "Action": ["sts:AssumeRole"],
                  "Effect": "Allow",
                  "Principal": {
                     "Service": ["ec2.amazonaws.com"]
                  }
               }]
            }
         },
         "Type": "AWS::IAM::Role"
      },
      "TargetGroupNode": {
         "Properties": {
            "HealthCheckIntervalSeconds": "30",
            "HealthCheckPort": "9100",
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": "10",
            "HealthyThresholdCount": "4",
            "Matcher": {
               "HttpCode": "200"
            },
            "Name": "Elasticsearch-target-group-node",
            "Port": "9100",
            "Protocol": "HTTP",
            "UnhealthyThresholdCount": "3",
            "VpcId": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "VpcId"]
            }
         },
         "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
      },
      "NodeALB": {
         "Properties": {
            "LoadBalancerAttributes": [{
               "Key": "access_logs.s3.enabled",
               "Value": "true"
            },
            {
               "Key": "access_logs.s3.bucket",
               "Value": {
                  "Ref": "BucketName"
               }
            },
            {
               "Key": "access_logs.s3.prefix",
               "Value": "elasticsearch-nodealb"
            }],
            "Name": "elasticsearch-nodealb",
            "Scheme": "internal",
            "SecurityGroups": [{
               "Ref": "sgElb"
            }],
            "Subnets": [{
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetA"]
            },
            {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetB"]
            },
            {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetC"]
            }],
            "Tags": [{
               "Key": "name",
               "Value": "elasticsearch-dev-nodealb"
            },
            {
               "Key": "environment",
               "Value": {
                  "Ref": "Environment"
               }
            }]
         },
         "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
      },
      "NodeALBHTTPListener": {
         "Properties": {
            "DefaultActions": [{
               "TargetGroupArn": {
                  "Ref": "TargetGroupNode"
               },
               "Type": "forward"
            }],
            "LoadBalancerArn": {
               "Ref": "NodeALB"
            },
            "Port": "80",
            "Protocol": "HTTP"
         },
         "Type": "AWS::ElasticLoadBalancingV2::Listener"
      },
      "PolicyCreateSnapshot": {
         "Properties": {
            "PolicyDocument": {
               "Statement": [{
                  "Action": ["ec2:CreateSnapshot",
                  "ec2:DescribeSnapshotAttribute",
                  "ec2:DescribeSnapshots",
                  "ec2:DescribeVolumeAttribute",
                  "ec2:DescribeVolumes",
                  "autoscaling:DescribeAutoScalingGroups",
                  "autoscaling:DescribeAutoScalingInstances",
                  "cloudformation:DescribeStackResource",
                  "cloudformation:DescribeStackResources",
                  "cloudformation:DescribeStacks",
                  "cloudformation:ListStacks",
                  "ec2:CreateVolume",
                  "cloudformation:ListStackResources"],
                  "Effect": "Allow",
                  "Resource": ["*"]
               }]
            },
            "PolicyName": "PolicyCreateSnapshot",
            "Roles": [{
               "Ref": "RoleInstance"
            }]
         },
         "Type": "AWS::IAM::Policy"
      },
      "PolicyEC2InstanceTag": {
         "Properties": {
            "PolicyDocument": {
               "Statement": [{
                  "Action": ["ec2:CreateTags",
                  "ec2:DescribeInstances",
                  "ec2:DescribeTags"],
                  "Effect": "Allow",
                  "Resource": ["*"]
               }]
            },
            "PolicyName": "PolicyGeneralEC2Instance",
            "Roles": [{
               "Ref": "RoleInstance"
            }]
         },
         "Type": "AWS::IAM::Policy"
      },
      "PolicyS3Access": {
         "Properties": {
            "PolicyDocument": {
               "Statement": [{
                  "Action": ["s3:GetObject",
                  "s3:PutObject",
                  "s3:List*",
                  "s3:GetBucketLocation",
                  "s3:DeleteObject",
                  "s3:AbortMultipartUpload"],
                  "Effect": "Allow",
                  "Resource": [{
                     "Fn::Join": ["",
                     ["arn:aws:s3:::",
                     {
                        "Ref": "BucketName"
                     },"/*"]]
                  },
                  {
                     "Fn::Join": ["",
                     ["arn:aws:s3:::mycobucketnameunique-dev-elb-logs",
                     "/*"]]
                  },
                  {
                     "Fn::Join": ["",
                     ["arn:aws:s3:::",
                     {
                        "Ref": "BucketName"
                     },
                     "-",
                     {
                        "Ref": "FormattedName"
                     },
                     "-",
                     {
                        "Ref": "Environment"
                     },
                     "/*"]]
                  },
                  {
                     "Fn::Join": ["",
                     ["arn:aws:s3:::",
                     {
                        "Ref": "BucketName"
                     },
                     "-",
                     {
                        "Ref": "FormattedName"
                     },
                     "-",
                     {
                        "Ref": "Environment"
                     }]]
                  }]
               }]
            },
            "PolicyName": "PolicyS3Access",
            "Roles": [{
               "Ref": "RoleInstance"
            }]
         },
         "Type": "AWS::IAM::Policy"
      },
      "ScaleDownPolicy": {
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
               "Ref": "AutoScalingGroupNode"
            },
            "Cooldown": "1200",
            "ScalingAdjustment": "-1"
         },
         "Type": "AWS::AutoScaling::ScalingPolicy"
      },
      "ScaleUpPolicy": {
         "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
               "Ref": "AutoScalingGroupNode"
            },
            "Cooldown": "1200",
            "ScalingAdjustment": "1"
         },
         "Type": "AWS::AutoScaling::ScalingPolicy"
      },
      "ListenerRuleKibanaHTTP": {
         "Properties": {
            "Actions": [{
               "TargetGroupArn": {
                  "Ref": "TargetGroupKibana"
               },
               "Type": "forward"
            }],
            "Conditions": [{
               "Field": "path-pattern",
               "Values": ["/admin/*"]
            }],
            "ListenerArn": {
               "Ref": "KibanaALBHTTPListener"
            },
            "Priority": "1"
         },
         "Type": "AWS::ElasticLoadBalancingV2::ListenerRule"
      },
      "KibanaALBHTTPListener": {
         "Properties": {
            "DefaultActions": [{
               "TargetGroupArn": {
                  "Ref": "TargetGroupKibana"
               },
               "Type": "forward"
            }],
            "LoadBalancerArn": {
               "Ref": "KibanaALB"
            },
            "Port": "80",
            "Protocol": "HTTP"
         },
         "Type": "AWS::ElasticLoadBalancingV2::Listener"
      },
      "TargetGroupKibana": {
         "Properties": {
            "HealthCheckIntervalSeconds": "30",
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": "10",
            "HealthyThresholdCount": "4",
            "Matcher": {
               "HttpCode": "200"
            },
            "Name": "elasticsearch-dev-kibana",
            "Port": "5601",
            "Protocol": "HTTP",
            "Targets": [{
               "Id": {
                  "Ref": "KibanaInstance"
               },
               "Port": 5601
            }],
            "UnhealthyThresholdCount": "3",
            "VpcId": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "VpcId"]
            }
         },
         "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
      },
      "KibanaInstance": {
         "Properties": {
            "EbsOptimized": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ebsoptimized"]
            },
            "IamInstanceProfile": {
               "Ref": "InstanceProfile"
            },
            "ImageId": {
               "Ref": "AMI"
            },
            "InstanceType": "t2.medium",
            "KeyName": {
               "Ref": "KeyName"
            },
            "Monitoring": "true",
            "SecurityGroupIds": [{
               "Ref": "sgEC2"
            }],
            "SubnetId": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetA"]
            },
            "Tags": [{
               "Key": "Name",
               "Value": "kibana-elasticsearch-dev"
            },
            {
               "Key": "environment",
               "Value": {
                  "Ref": "Environment"
               }
            },
            {
               "Key": "role",
               "Value": "Admin"
            },
            {
               "Key": "app",
               "Value": "elasticsearch"
            }],
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": ["",
                  ["#!/bin/bash\n",
                  "export INTERNAL_DOMAIN=$(cat /etc/resolv.conf | grep search | awk '{print $2}' | awk -F '.' '{print $2}')\nexport ES_HEAP=\"",
                  {
                     "Fn::FindInMap": ["EnvMappings",
                     {
                        "Ref": "Environment"
                     },
                     "KibanaESHeap"]
                  },
                  "\"\n",
                  "export ES_SNAPSHOT=\"",
                  {
                     "Ref": "ESSnapshot"
                  },
                  "\"\n",
                  "export cluster_name=\"",
                  {
                     "Ref": "FormattedName"
                  },
                  "\"\n",
                  "export STACK_ENV=\"",
                  {
                     "Ref": "Environment"
                  },
                  "\"\n",
                  "export AWS_DEFAULT_REGION=\"",
                  {
                     "Ref": "AWS::Region"
                  },
                  "\"\n",
                  "export CFN_STACK=\"",
                  {
                     "Ref": "AWS::StackName"
                  },
                  "\"\n",
                  "apt-get update && apt-get install -y unzip\n",
                  "curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
                  "unzip awscli-bundle.zip\n",
                  "python3 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
                  "#!/bin/bash -ex \n",
                  "sudo wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - \n",
                  "sudo apt-get install apt-transport-https \n",
                  "sudo echo \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\" | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list \n",
                  "sudo apt-get update && sudo apt-get install -y elasticsearch openjdk-8-jre kibana language-pack-en \n",
                  "sudo update-rc.d elasticsearch defaults 95 10 \n",
                  "sudo update-rc.d kibana defaults 95 10 \n",
                  "mkdir -p /etc/elasticsearch /etc/kibana \n",
                  "sysctl vm.swappiness=1 \n",
                  "export instanceid=$(curl http://169.254.169.254/latest/meta-data/instance-id -s) \n",
                  "export stackname=$(aws ec2 describe-tags --filters \"Name=key,Values=aws:cloudformation:stack-name\" \"Name=resource-id,Values=$instanceid\" --query 'Tags[0].Value' --output text) \n",
                  "export esurl=$(aws cloudformation describe-stack-resources --stack-name $stackname --logical-resource-id CnameNodeELB --query 'StackResources[*].PhysicalResourceId' --output text) \n",
                  "cat << EOF >> /etc/kibana/kibana.yml \n",
                  "server.host: \"0.0.0.0\"\n",
                  "elasticsearch.url: \"http://$esurl:80\"\n",
                  "elasticsearch.preserveHost : true\n",
                  "EOF\n",
                  "echo ES_JAVA_OPTS=\"\"-Xms$ES_HEAP -Xmx$ES_HEAP\"\" >> /etc/default/elasticsearch\n",
                  "/bin/systemctl daemon-reload\n",
                  "/bin/systemctl enable kibana.service\n",
                  "/etc/init.d/elasticsearch start\n",
                  "systemctl start kibana.service\n"
                  ]]
               }
            }
         },
         "Type": "AWS::EC2::Instance"
      },
      "KibanaALB": {
         "Properties": {
            "LoadBalancerAttributes": [{
               "Key": "access_logs.s3.enabled",
               "Value": "true"
            },
            {
               "Key": "access_logs.s3.bucket",
               "Value": {
                     "Ref": "BucketName"
                  }
            },
            {
               "Key": "access_logs.s3.prefix",
               "Value": "elasticsearch-nodealb"
            }],
            "Name": "elasticsearch-admin-alb",
            "Scheme": "internal",
            "SecurityGroups": [{
               "Ref": "sgElb"
            }],
            "Subnets": [{
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetA"]
            },
            {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetB"]
            },
            {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "ALBPublicSubnetC"]
            }],
            "Tags": [{
               "Key": "name",
               "Value": "elasticsearch-dev-kibana"
            }]
         },
         "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
      },
      "sgElb": {
         "Properties": {
            "GroupDescription": "ELB Security group",
            "SecurityGroupEgress": [{
               "CidrIp": "0.0.0.0/0",
               "FromPort": "0",
               "IpProtocol": "-1",
               "ToPort": "65535"
            }],
            "SecurityGroupIngress": [{
               "CidrIp": "0.0.0.0/0",
               "FromPort": "443",
               "IpProtocol": "tcp",
               "ToPort": "443"
            },
            {
               "CidrIp": "0.0.0.0/0",
               "FromPort": "80",
               "IpProtocol": "tcp",
               "ToPort": "80"
            },
            {
               "CidrIp": "0.0.0.0/0",
               "FromPort": "80",
               "IpProtocol": "tcp",
               "ToPort": "80"
            }],
            "Tags": [{
               "Key": "name",
               "Value": "Elastic search elb testing"
            }],
            "VpcId": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "VpcId"]
            }
         },
         "Type": "AWS::EC2::SecurityGroup"
      },
      "sgEC2":{  
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{  
            "GroupDescription":"Enable ElasticSearch access",
            "SecurityGroupEgress": [{
               "CidrIp": "0.0.0.0/0",
               "FromPort": "0",
               "IpProtocol": "-1",
               "ToPort": "65535"
            }],
            "SecurityGroupIngress":[  
               {  
                  "IpProtocol":"tcp",
                  "FromPort":"9100",
                  "ToPort":"9100",
                  "CidrIp":"10.0.0.0/8"
               },
               {
                  "FromPort": "9100",
                  "IpProtocol": "tcp",
                  "SourceSecurityGroupId": {
                     "Ref": "sgElb"
                  },
                  "ToPort": "9100"
               },
               {  
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"10.0.0.0/8"
               },
               {
                  "FromPort": "5601",
                  "IpProtocol": "tcp",
                  "SourceSecurityGroupId": {
                     "Ref": "sgElb"
                  },
                  "ToPort": "5601"
               }
            ],
            "VpcId": {
               "Fn::FindInMap": ["EnvMappings",
               {
                  "Ref": "Environment"
               },
               "VpcId"]
            }
         }
      }
   },
   "Outputs" : {
    "LaunchConfig" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "NodeALB", "DNSName" ]}]] },
      "Description" : "URL for ElasticSearch endpoint"
    }
  }
}